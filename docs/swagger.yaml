definitions:
  handlers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  handlers.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  models.Category:
    properties:
      products:
        items:
          $ref: '#/definitions/models.Product'
        type: array
      sold_product_amount:
        type: integer
      type:
        type: string
    type: object
  models.Product:
    properties:
      category_id:
        type: integer
      price:
        type: integer
      stock:
        type: integer
      title:
        type: string
      transaction_history:
        items:
          $ref: '#/definitions/models.TransactionHistory'
        type: array
    type: object
  models.TransactionHistory:
    properties:
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        type: integer
      quantity:
        type: integer
      total_price:
        type: integer
      user_id:
        type: integer
    type: object
  models.User:
    properties:
      balance:
        type: integer
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
      role:
        type: string
      transaction_history:
        items:
          $ref: '#/definitions/models.TransactionHistory'
        type: array
    type: object
info:
  contact: {}
paths:
  /categories:
    get:
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of categories
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Gets all categories
    post:
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      - description: Category type
        in: body
        name: type
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: Category created successfully
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Creates a new category
  /categories/{id}:
    delete:
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      - description: Category ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Category deleted successfully
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "404":
          description: Category not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Deletes a category by ID
    patch:
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      - description: Category ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      - description: Type
        in: body
        name: type
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Updated category
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Category not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Updates a category type by ID
  /products:
    get:
      consumes:
      - application/json
      description: Get a list of all products
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of products
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get all products
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Create a new product with the provided details
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product title
        in: body
        name: title
        required: true
        schema:
          type: string
      - description: Product price
        in: body
        name: price
        required: true
        schema:
          type: integer
      - description: Product stock
        in: body
        name: stock
        required: true
        schema:
          type: integer
      - description: Category ID
        in: body
        name: category_id
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Product created successfully
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new product
      tags:
      - Products
  /products/{productId}:
    delete:
      consumes:
      - application/json
      description: Delete an existing product by ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product has been successfully deleted
          schema:
            type: string
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Delete a product
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Update an existing product with the provided details
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      - description: Product title
        in: body
        name: title
        required: true
        schema:
          type: string
      - description: Product price
        in: body
        name: price
        required: true
        schema:
          type: integer
      - description: Product stock
        in: body
        name: stock
        required: true
        schema:
          type: integer
      - description: Category ID
        in: body
        name: category_id
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Updated product
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Update a product
      tags:
      - Products
  /transactions:
    post:
      consumes:
      - application/json
      description: Purchase a product and create a transaction record
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product ID to purchase
        in: body
        name: product_id
        required: true
        schema:
          type: integer
      - description: Quantity of the product to purchase
        in: body
        name: quantity
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Purchase successfull
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new transaction
      tags:
      - Transactions
  /transactions/my-transactions:
    get:
      consumes:
      - application/json
      description: Retrieve transactions for the authenticated user
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of user's transactions
          schema:
            items:
              $ref: '#/definitions/models.TransactionHistory'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Transactions not found for the user
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get user's transactions
      tags:
      - Transactions
  /transactions/user-transactions:
    get:
      consumes:
      - application/json
      description: Retrieve all transactions (admin access)
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of all transactions
          schema:
            items:
              $ref: '#/definitions/models.TransactionHistory'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all transactions
      tags:
      - Transactions
  /users/register:
    post:
      parameters:
      - description: Balance
        in: body
        name: email
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/models.User'
      summary: Updates the user's balance
swagger: "2.0"
